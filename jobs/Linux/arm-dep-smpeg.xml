<?xml version='1.0' encoding='UTF-8'?>
<project>
  <actions/>
  <description>smpeg is an mpeg decoding library, which runs on just about any platform.&lt;br&gt;&#xd;
Builds with: GNU make&lt;br&gt;&#xd;
Homepage: &lt;a href=&quot;http://icculus.org/smpeg/&quot;&gt;http://icculus.org/smpeg/&lt;/a&gt;&lt;br&gt;&#xd;
Downloads: &lt;a href=&quot;http://svn.icculus.org/smpeg/&quot;&gt;&#xd;
http://svn.icculus.org/smpeg/&lt;/a&gt;</description>
  <logRotator class="hudson.tasks.LogRotator">
    <daysToKeep>-1</daysToKeep>
    <numToKeep>5</numToKeep>
    <artifactDaysToKeep>-1</artifactDaysToKeep>
    <artifactNumToKeep>-1</artifactNumToKeep>
  </logRotator>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.googlecode.GoogleCodeProjectProperty plugin="googlecode@1.7"/>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>PKG_NAME</name>
          <description>Name of the download tarball and source directory</description>
          <defaultValue>smpeg</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.ChoiceParameterDefinition>
          <name>PKG_SVN_TAG</name>
          <description>SVN tag of smpeg to use for building build</description>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string>release_0_4_5</string>
              <string>release_2_0_0</string>
              <string>trunk</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>TARBALL_DIR</name>
          <description>Directory for downloaded source</description>
          <defaultValue>$HOME/source</defaultValue>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    <hudson.plugins.disk__usage.DiskUsageProperty plugin="disk-usage@0.22">
      <diskUsageWithoutBuilds>17360497</diskUsageWithoutBuilds>
      <slaveWorkspacesUsage class="concurrent-hash-map">
        <entry>
          <string></string>
          <concurrent-hash-map>
            <entry>
              <string>/home/jenkins/.jenkins/jobs/arm-dep-smpeg/workspace</string>
              <long>17345857</long>
            </entry>
          </concurrent-hash-map>
        </entry>
      </slaveWorkspacesUsage>
    </hudson.plugins.disk__usage.DiskUsageProperty>
  </properties>
  <scm class="hudson.scm.NullSCM"/>
  <canRoam>true</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers/>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>#/bin/sh $HOME/src/jenkins/config.git/scripts/deps_check.sh \
#  --deps &quot;cmake p7zip fluidsynth libfluidsynth-dev fluid-soundfont-gm 
#    fluid-soundfont-gs&quot;</command>
    </hudson.tasks.Shell>
    <hudson.tasks.Shell>
      <command>/bin/sh $HOME/src/jenkins/config.git/scripts/update_git.sh \
  --path $HOME/src/jenkins/config.git</command>
    </hudson.tasks.Shell>
    <hudson.tasks.Shell>
      <command>/bin/sh $HOME/src/jenkins/config.git/scripts/delete_dir.sh \
  -- $WORKSPACE/output $WORKSPACE/artifacts</command>
    </hudson.tasks.Shell>
    <hudson.plugins.copyartifact.CopyArtifact plugin="copyartifact@1.28">
      <project>arm-libsdl</project>
      <filter>libsdl.artifact.tar.xz</filter>
      <target></target>
      <selector class="hudson.plugins.copyartifact.StatusBuildSelector"/>
    </hudson.plugins.copyartifact.CopyArtifact>
    <hudson.tasks.Shell>
      <command>/bin/sh $HOME/src/jenkins/config.git/scripts/unpack_build_artifacts.sh \
 -- libsdl

/bin/bash $HOME/src/jenkins/config.git/scripts/munge_lib_config.sh \
  --file sdl-config --unmunge
</command>
    </hudson.tasks.Shell>
    <hudson.tasks.Shell>
      <command># FIXME use a stamp file and/or symlink with a generic directory name
# to indicate what version of source is currently downloaded
# delete the existing source directory, if it exists
if [ ${PKG_SVN_TAG} == &quot;trunk&quot; ]; then
  SVN_URL=&quot;svn://svn.icculus.org/${PKG_NAME}/${PKG_SVN_TAG}&quot;
else
  SVN_URL=&quot;svn://svn.icculus.org/${PKG_NAME}/tags/${PKG_SVN_TAG}&quot;
fi
if [ -d $WORKSPACE/${PKG_NAME}-${PKG_SVN_TAG}.svn ]; then
  cd $WORKSPACE/${PKG_NAME}-${PKG_SVN_TAG}.svn
  svn update
else
  # snag fresh source
  cd $WORKSPACE
  svn co $SVN_URL ${PKG_NAME}-${PKG_SVN_TAG}.svn
fi</command>
    </hudson.tasks.Shell>
    <hudson.tasks.Shell>
      <command># Source the crosstool-ng shell script; 
# this adds the cross toolchain to $PATH
source ~/.bashrc.d/crosstool-ng

# change into the source tree
cd ${WORKSPACE}/${PKG_NAME}-${PKG_SVN_TAG}.svn

if [ ! -f configure ]; then
  bash autogen.sh
else
  # clean the current source tree
  make distclean
fi

# then run configure to set up the source for compiling
SDL_CONFIG=${WORKSPACE}/artifacts/bin/sdl-config \
PKG_CONFIG_PATH=$WORKSPACE/artifacts/lib/pkgconfig \
CPPFLAGS=&quot;-I${WORKSPACE}/artifacts/include&quot; \
LDFLAGS=&quot;-Wl,-rpath-link -Wl,${WORKSPACE}/artifacts/lib&quot; \
  ./configure --prefix=$WORKSPACE/output \
  --build=x86_64 --host=armv6-lack_rpi-linux-gnueabi \
  --disable-gtktest --disable-gtk-player --disable-opengl-player

# run the actual build
time make
time make install
</command>
    </hudson.tasks.Shell>
    <hudson.tasks.Shell>
      <command>/bin/bash $HOME/src/jenkins/config.git/scripts/munge_lib_config.sh \
  --file smpeg-config --munge
</command>
    </hudson.tasks.Shell>
    <hudson.tasks.Shell>
      <command>/bin/bash $HOME/src/jenkins/config.git/scripts/create_build_artifact.sh \
  --name=${PKG_NAME} \
  --source-version=${PKG_SVN_TAG} \
  --output=${WORKSPACE}
</command>
    </hudson.tasks.Shell>
  </builders>
  <publishers>
    <hudson.tasks.ArtifactArchiver>
      <artifacts>smpeg.artifact.tar.xz</artifacts>
      <latestOnly>false</latestOnly>
      <allowEmptyArchive>false</allowEmptyArchive>
    </hudson.tasks.ArtifactArchiver>
  </publishers>
  <buildWrappers>
    <hudson.plugins.ansicolor.AnsiColorBuildWrapper plugin="ansicolor@0.3.1">
      <colorMapName>xterm</colorMapName>
    </hudson.plugins.ansicolor.AnsiColorBuildWrapper>
  </buildWrappers>
</project>