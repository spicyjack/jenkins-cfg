<?xml version='1.0' encoding='UTF-8'?>
<project>
  <actions/>
  <description>Preflights the Jenkins environment for:&lt;br&gt;&#xd;
&lt;ul&gt;&#xd;
  &lt;li&gt;armv6-rpi-linux-gnueabi (Raspberry Pi B ver. 1)&lt;/li&gt;&#xd;
  &lt;li&gt;armv7-rpi2-linux-gnueabihf (Raspberry Pi B ver. 2)&lt;/li&gt;&#xd;
  &lt;li&gt;armv8-rpi3-linux-gnueabihf (Raspberry Pi B ver. 3)&lt;/li&gt;&#xd;
&lt;/ul&gt;&#xd;
Checks things like scripts and compilers.</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.googlecode.GoogleCodeProjectProperty plugin="googlecode@1.7"/>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>-1</daysToKeep>
        <numToKeep>10</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>-1</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
    <hudson.plugins.disk__usage.DiskUsageProperty plugin="disk-usage@0.28"/>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.ChoiceParameterDefinition>
          <name>BUILD_ARCH</name>
          <description>Architecture to build with; determines which toolchain to use, and what strings to look for in the resulting test binary</description>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string>armv6-rpi-linux-gnueabi</string>
              <string>armv7-rpi2-linux-gnueabihf</string>
              <string>armv8-rpi3-linux-gnueabihf</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>
  <scm class="hudson.scm.NullSCM"/>
  <canRoam>true</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers/>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>#!/bin/bash
### RUN A TEST COMPILE GIVEN THE TOOLCHAIN IN ${BUILD_ARCH}

# Not sure why this is here...
#if [ -t 1 ]; then
#  echo &quot;terminal is connected to fh #1&quot;
#else
#  echo &quot;terminal is not connected to fh #1&quot;
#fi

### EXPORTS AND SOURCING ###
if [ ! -d $HOME/src/jenkins/config.git ]; then
  echo &quot;ERROR: missing &apos;jenkins/config.git&apos; repo&quot;
  exit 1
fi

# We know the config.git repo exists, so we can source it now
. $HOME/src/jenkins/config.git/scripts/common_jenkins_functions.sh

### SET UP ENVIRONMENT, CHECK FOR TOOLS
job_step_header &quot;Setting up script exports and sourcing&quot;

# source environment variables and updated $PATH script
if [ -f ${HOME}/.bashrc.d/env_vars_path ]; then
  . ${HOME}/.bashrc.d/env_vars_path
else
  echo &quot;ERROR: &apos;env_vars_path&apos; bashrc.d script not found&quot;
  exit 1
fi
# source crosstool-ng-env script
echo  &quot;Checking for crosstool-ng bashrc script&quot;
if [ -e ~/.bashrc.d/crosstool-ng-env ]; then
  source ~/.bashrc.d/crosstool-ng-env
else
  echo &quot;ERROR: &apos;crosstool-ng-env&apos; bashrc.d script not found&quot;
  exit 1
fi


### CHECK FOR BUILD_ARCH ###
if [ -d &quot;/home/cross/${BUILD_ARCH}&quot; ]; then
  export CROSS_COMPILER=&quot;${BUILD_ARCH}-gcc&quot;
else
  echo &quot;ERROR: can&apos;t find compiler that matches BUILD_ARCH!&quot;
  echo &quot;BUILD_ARCH: ${BUILD_ARCH}&quot;
  exit 1
fi

# FIXME if we ever try to compile multiple architectures, we
# would need code to handle more expected outputs here
export EXPECTED_BINARY_FILE_OUTPUT=&quot;ELF 32-bit LSB executable, ARM&quot;
#elif [ &quot;x${BUILD_ARCH}&quot; = &quot;xppc&quot; ]; then
#  export CROSS_COMPILER=&quot;powerpc-lack-linux-gnu-gcc&quot;
#  export EXPECTED_BINARY_FILE_OUTPUT=&quot;ELF 32-bit MSB executable, PowerPC&quot;
#else
#  echo &quot;ERROR: missing/incorrect BUILD_ARCH specified!&quot;
#  echo &quot;BUILD_ARCH choices: &apos;arm&apos; or &apos;ppc&apos;&quot;
#  exit 1
#fi

# output environment to a log file instead of displaying it
info &quot;Saving build environment to &apos;environment.${BUILD_TAG}.txt&apos;&quot;
set &gt; environment.${BUILD_TAG}.txt

### CHECKING FOR CROSS-COMPILE TOOLS
job_step_header &quot;Checking for cross-compile binaries/scripts&quot;
EXISTS_CT_NG=$(which ct-ng)
check_exit_status $? &quot;Checking for &apos;ct-ng&apos;&quot; &quot;$EXISTS_CT_NG&quot;
EXISTS_GCC=$(which $CROSS_COMPILER)
check_exit_status $? &quot;Checking for &apos;$CROSS_COMPILER&apos;&quot; &quot;$EXISTS_GCC&quot;

### SET UP TEST SOURCE FILE
job_step_header &quot;Set up &apos;test.c&apos; to be cross-compiled&quot;
cat &lt;&lt;EO_TEST_FILE &gt; ${WORKSPACE}/test.c
#include &lt;stdio.h&gt;
int main() {
  printf(&quot;Hello, world!\n&quot;); return 0;
}
EO_TEST_FILE

job_step_header &quot;Output of &apos;ls -l&apos; in WORKSPACE&quot;
ls -l

### CROSS COMPILE TEST SOURCE FILE
job_step_header &quot;Compiling test binary with &apos;${CROSS_COMPILER}&apos;&quot;
$CROSS_COMPILER -o $WORKSPACE/test_${BUILD_ARCH} $WORKSPACE/test.c
TEST_BINARY_FILE_OUTPUT=$(file $WORKSPACE/test_${BUILD_ARCH})

### CHECK THE COMPILED BINARY
job_step_header &quot;Check the test binary&quot;
VALID_BINARY=$(echo $TEST_BINARY_FILE_OUTPUT | grep -c &quot;${EXPECTED_BINARY_FILE_OUTPUT}&quot;)

if [ $VALID_BINARY -gt 0 ]; then
  echo &quot;==== Test binary &apos;test_${BUILD_ARCH}&apos; compiled successfully! ====&quot;
  echo &quot;==== Test binary file is: ====&quot;
  echo $TEST_BINARY_FILE_OUTPUT
  exit 0
else
  echo &quot;ERROR: test binary file &apos;test_${BUILD_ARCH}&apos; output did not match expected output&quot;
  echo &quot;Expected: ${EXPECTED_BINARY_FILE_OUTPUT}&quot;
  echo &quot;Received: ${TEST_BINARY_FILE_OUTPUT}&quot;
  exit 1
fi </command>
    </hudson.tasks.Shell>
  </builders>
  <publishers>
    <hudson.tasks.ArtifactArchiver>
      <artifacts>test_*, *.txt</artifacts>
      <allowEmptyArchive>false</allowEmptyArchive>
      <onlyIfSuccessful>false</onlyIfSuccessful>
      <fingerprint>false</fingerprint>
      <defaultExcludes>true</defaultExcludes>
      <caseSensitive>true</caseSensitive>
    </hudson.tasks.ArtifactArchiver>
  </publishers>
  <buildWrappers>
    <hudson.plugins.ws__cleanup.PreBuildCleanup plugin="ws-cleanup@0.34">
      <deleteDirs>false</deleteDirs>
      <cleanupParameter></cleanupParameter>
      <externalDelete></externalDelete>
    </hudson.plugins.ws__cleanup.PreBuildCleanup>
    <hudson.plugins.ansicolor.AnsiColorBuildWrapper plugin="ansicolor@0.5.2">
      <colorMapName>xterm</colorMapName>
    </hudson.plugins.ansicolor.AnsiColorBuildWrapper>
    <com.lookout.jenkins.EnvironmentScript plugin="environment-script@1.2.5">
      <script># set up the path to downloaded files
echo TARBALL_DIR=${HOME}/source
# clear the &quot;quiet build&quot; flag
echo QUIET=0</script>
      <scriptType>unixScript</scriptType>
      <runOnlyOnParent>false</runOnlyOnParent>
      <hideEnvironmentVariablesValues>false</hideEnvironmentVariablesValues>
    </com.lookout.jenkins.EnvironmentScript>
  </buildWrappers>
</project>